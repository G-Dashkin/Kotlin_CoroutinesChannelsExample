package com.example.kotlin_coroutineschannelsexample.CoroutinesExamples.Examples

import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlin.system.measureTimeMillis

suspend fun main() {
    // функция .combine(), которая объединяет два последних полученных элемента, из каждого потока.
    val time = measureTimeMillis {
        val flow1 = flowOf("1", "2").onEach { delay(10) }
        val flow2 = flowOf("a", "b", "c").onEach { delay(15) }
        flow1.combine(flow2) { f1, f2 ->
            f1 + f2
        }.collect {
            println("[${Thread.currentThread().name}] Receive value $it")
        }
    }
    println("[${Thread.currentThread().name}] Completed in $time ms")
    // Запустим код.

    // Функцию .combine() очень удобно использовать когда нам необходимо обрабатывать одновременно
    // два потока и формировать какое то общее состояние при получении элементов в каждом из них

    // Рассмотрим по шагам как выполняется функция .combine(). Сначала в потоке 1 пояляется элемент
    // 1. Так как на этот момент в потоке 2 еще нет ни одного элемента, на выходе тоже не будет ни
    // одного элемента.

    // Затем в потоке 2 появляется элемент а. Он комбинируется с последним элементом из потока 1 и
    // на выходе мы получаем элемент - 1а

    // Затем в первом потоке появляется элемент 2, он комбинируется с последнем элементом из потока
    // 2 и на выходе мы имеем - 2а

    // Далее в потоке 2 появляется элемент b – он так же комбинируется с последнем элементом из потока
    // 1 и на выходе мы имеем элемент - 2b

    // И наконец в потоке 2 появляется элемент – c, он в свою очередь так же комбинируется с элементов
    // 2 и на выходе мы получаем элемент - 2с
}