Идея каналов в передаче данных между корутинами. Мы помещаем элементы в канал и получаем их в другом.

Обычно для передачи значений между корутинами используется AcyncAwait, но они позволяют работать лишь с
одним значением. Когда нужно работать с несколькими значениями можно использоваться каналы

Каналы похожи на BlockingQueue из Java. Ключевая разница, что вместо блокирующих потоков, каналы построены
на основе корутин и поэтому использую прерывание.

Два основных методы для работы с каналами .send() и .receive()
.send() - используется для отправки значений в каналы
.receive() - используется для получения значений из каналов
Также получить все значения из каналов можно при помощи итерации через цикл или встроенными методами.
____________________________________________________________________________________________________
Есть 4 типа компасити каналов:
BUFFERED - Задает сандартный размер буфкра, который определен в свойствах окружения (по умолчанию это 64)
CONFLATED - Размер буфера = 1. Храни только полследнее полученное значение, а предыдущее удаляется
RENDEZVOUS - Без буфера. Значение для любого канала
UNLIMITED - Максимально возможный размер буфера (Int.MAX_SIZE)
____________________________________________________________________________________________________
По умолчанию канал не будет закрыт, до вызова метода .close()
При попытке считать значения из закрытого канала будет выброшено исключение.
Также можно можно проверить доступен ли канла для отправки или получения данных в нем пот помощи
фуникции .isClosedForReceive

Обчно просто каналы (Channel) не создаются.
Обычно используются ReceiveChannel и SendChannel
produce - служит для генерации кончных или бесконечных значений.
actor - используется для получения значений из вне и для их упорядоченной обработки.